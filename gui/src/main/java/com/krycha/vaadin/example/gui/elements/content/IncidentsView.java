package com.krycha.vaadin.example.gui.elements.content;

import org.vaadin.dialogs.ConfirmDialog;

import com.krycha.vaadin.example.entity.Customer;
import com.krycha.vaadin.example.entity.Incident;
import com.krycha.vaadin.example.gui.KpiUI;
import com.krycha.vaadin.example.gui.elements.bar.CRUDBar;
import com.krycha.vaadin.example.gui.elements.content.FormWindow.EditorSavedEvent;
import com.krycha.vaadin.example.gui.elements.content.FormWindow.EditorSavedListener;
import com.vaadin.addon.jpacontainer.EntityItem;
import com.vaadin.addon.jpacontainer.JPAContainer;
import com.vaadin.addon.jpacontainer.JPAContainerFactory;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.filter.Like;
import com.vaadin.data.util.filter.Or;
import com.vaadin.event.ItemClickEvent;
import com.vaadin.event.FieldEvents.TextChangeEvent;
import com.vaadin.event.FieldEvents.TextChangeListener;
import com.vaadin.event.ItemClickEvent.ItemClickListener;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.Table;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button;

public class IncidentsView extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 5451275838329915354L;
	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Table incidentsTable;
	@AutoGenerated
	private CRUDBar crudBar;
	private JPAContainer<Incident> incidents;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public IncidentsView() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		incidents = JPAContainerFactory.make(Incident.class, KpiUI.PERSISTENCE_UNIT);
		incidents.setAutoCommit(true);
		incidentsTable.setContainerDataSource(incidents);
		incidentsTable.setVisibleColumns(new Object[] { "customer", "measurement", "date", "count" });
		incidentsTable.setSelectable(true);
		incidentsTable.setImmediate(true);

		incidentsTable.addValueChangeListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = -6400801623536600914L;

					@Override
					public void valueChange(ValueChangeEvent event) {
						crudBar.setDeleteAndEditEnabled(event.getProperty()
								.getValue() != null);
					}
				});
		crudBar.setDeleteAndEditEnabled(false);

		incidentsTable.addItemClickListener(new ItemClickListener() {
			private static final long serialVersionUID = -6069395845288085180L;

			@Override
			public void itemClick(ItemClickEvent event) {
				if (event.isDoubleClick()) {
					incidentsTable.select(event.getItemId());
				}
			}
		});

		crudBar.addButtonListener(new Button.ClickListener() {
			private static final long serialVersionUID = 4665646187098385013L;

			@Override
			public void buttonClick(ClickEvent event) {
				final Incident item = new Incident();
				IncidentFormWindow window = new IncidentFormWindow(item, Incident.class);
				window.addListener(new EditorSavedListener<Customer>() {
					private static final long serialVersionUID = 8833795022064976617L;

					@Override
					public void editorSaved(EditorSavedEvent<Customer> event) {
						incidents.addEntity(item);
					}

				});
				UI.getCurrent().addWindow(window);
			}
		});

		crudBar.editButtonListener(new Button.ClickListener() {
			private static final long serialVersionUID = -8007102091495300561L;

			@Override
			public void buttonClick(ClickEvent event) {
				final EntityItem<Incident> item = incidents.getItem(incidentsTable.getValue());
				IncidentFormWindow window = new IncidentFormWindow(item.getEntity(), Incident.class);
				window.addListener(new EditorSavedListener<Customer>() {
					private static final long serialVersionUID = 2772292165709721347L;

					@Override
					public void editorSaved(EditorSavedEvent<Customer> event) {
						incidents.addEntity(item.getEntity());
					}

				});
				UI.getCurrent().addWindow(window);
			}
		});

		crudBar.removeButtonListener(new Button.ClickListener() {
			private static final long serialVersionUID = 3898233152388238648L;

			@Override
			public void buttonClick(ClickEvent event) {
				EntityItem<Incident> item = incidents.getItem(incidentsTable.getValue());
				Incident entity = item.getEntity();
				String captionString = "";
				if (entity.getCustomer() != null) {
					captionString = String.format("Delete \"%s-%s-%s\"?", entity.getCustomer().getShortName(),
							entity.getMeasurement().getShortName(), entity.getDate());
				}
				ConfirmDialog.show(UI.getCurrent(), "Please Confirm!",
						captionString, "Yes", "No",
						new ConfirmDialog.Listener() {
							private static final long serialVersionUID = -7014811035850138105L;

							public void onClose(ConfirmDialog dialog) {
								if (dialog.isConfirmed()) {
									incidents.removeItem(incidentsTable.getValue());
									crudBar.setDeleteAndEditEnabled(false);
									Notification.show("Success!");
								}
							}
						});
			}

		});

		crudBar.findTextChangeListener(new TextChangeListener() {
			private static final long serialVersionUID = -6588496598418979464L;

			@Override
			public void textChange(TextChangeEvent event) {
				updateFilters(event.getText());
			}
		});

		crudBar.setSearchInputPrompt("Search by name or description");
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// crudBar
		crudBar = new CRUDBar();
		crudBar.setImmediate(false);
		crudBar.setWidth("100.0%");
		crudBar.setHeight("-1px");
		mainLayout.addComponent(crudBar);

		// incidentsTable
		incidentsTable = new Table();
		incidentsTable.setImmediate(false);
		incidentsTable.setWidth("100.0%");
		incidentsTable.setHeight("100.0%");
		mainLayout.addComponent(incidentsTable);
		mainLayout.setExpandRatio(incidentsTable, 1.0f);

		return mainLayout;
	}

	private void updateFilters(String textFilter) {
		incidents.setApplyFiltersImmediately(false);
		incidents.removeAllContainerFilters();
		if (textFilter != null && !textFilter.equals("")) {
			Or or = new Or(new Like("shortName", "%" + textFilter + "%", false),
					new Like("description", "%" + textFilter + "%", false));
			incidents.addContainerFilter(or);
		}
		incidents.applyFilters();
	}
}
